# Security Best Practices

- **Input Validation & Sanitization**: Always validate and sanitize all inputs (including user data, API responses, etc.) to prevent injection attacks (SQL injection, XSS) and ensure data integrity. Reject or cleanse any unexpected or malicious input before processing.
- **No Unsafe Code Execution**: Do not use dangerous functions like `eval()` or the Function constructor to execute code from strings. Avoid running shell commands or spawning processes (`child_process` in Node.js) unless absolutely necessary and done in a safe manner. This prevents arbitrary code execution and command injection vulnerabilities.
- **Secure Data Handling**: Never hard-code sensitive information (credentials, API keys, personal data) in the codebase. Use environment variables or secure configuration files for secrets, and do not log or expose them. Handle personal data in compliance with privacy guidelines (e.g., GDPR), and always hash or encrypt sensitive data at rest when appropriate.
- **Use Proven Security Practices**: Implement robust authentication and authorization checks where applicable. For example, use industry-standard methods (OAuth 2.0, JWTs) for user auth in web APIs. Always use secure protocols (HTTPS for external requests, WSS for websockets) to protect data in transit. Use parameterized queries or ORM methods for database access to avoid SQL injection.
- **Error Handling & Logging**: Fail securely. Handle errors by catching exceptions and logging them in a secure manner (avoiding sensitive info in logs). Return generic error messages to users instead of internal details or stack traces. This ensures that potential attackers do not gain insight into the systemâ€™s internals from error responses.
- **Principle of Least Privilege**: Only request or access the minimum resources and permissions needed. Avoid using high-privilege accounts or APIs if a lower-privileged option is sufficient. For example, if running scripts or containers, do so as a non-root user. Similarly, limit file system or network access in code (and for AI agents) to only what is necessary for the task.
- **Safe Dependencies**: Keep third-party libraries and frameworks up to date to receive security patches. Avoid dependencies with known vulnerabilities or poor maintenance. Regularly run dependency audits (e.g., `npm audit`) and address any high-severity issues promptly. Prefer well-maintained libraries and remove unused dependencies to minimize the attack surface.

## Database Security
- Always use parameterized queries or prepared statements.
- Avoid dynamic query construction with user input.
- Regularly rotate database credentials and store them securely in environment variables.
- Enforce strict database user roles with minimal permissions.
- Enable SSL connections for database interactions in production environments.
- Conduct regular audits of database access and query logs.
