# Agent Behavior Rules

- **Scope of Changes**: The AI agent should only create or modify files that are relevant to its current task or instructions. Do not make changes to files outside the scope of the request. For example, if the task is to update a specific module, other modules or configuration files should remain untouched unless explicitly part of the instructions.
- **No Unauthorized Actions**: The agent must not attempt to modify its own rules or core project settings, and it should not execute operations that have not been approved (such as running shell commands, altering git settings, or accessing external systems) without explicit permission. All actions should remain within the bounds of the development environment and the given task.
- **Safety and Verification**: Before finalizing any change, the agent should verify that the code works and does not break existing functionality. If possible, run tests or at least perform static analysis/type-checking on the changes. If the agent is uncertain about a solution or a potential side effect, it should leave a TODO comment or ask for clarification rather than guessing and possibly introducing bugs.
- **Structured, Incremental Changes**: The agent should make incremental changes and commit frequently. Avoid bundling multiple unrelated fixes or features in a single change. Break down large tasks into smaller steps, implementing and testing each step before moving on. This makes it easier to pinpoint issues and maintain a clear history.
- **Commit Etiquette**: Enforce clear commit messages and well-structured commits. Use a convention like *Conventional Commits* for commit messages (e.g., prefixes such as `feat:`, `fix:`, `docs:`, `refactor:` followed by a short description). Each commit message should succinctly explain the **what** and **why** of the change. The agentâ€™s commits should be easy for human reviewers to understand and should not include any irrelevant or sensitive information.
- **Respect Project Conventions**: The agent should follow all project-specific conventions and constraints. This means adhering to the coding standards and guidelines outlined in all rule files (security, style, etc.) when writing code. It also means using the same patterns and libraries the project has already adopted (e.g., if the project uses a certain framework or design pattern, the agent should use it rather than introducing a new one without reason). If the agent needs to introduce a new dependency or make a significant architectural change, it should do so only with good justification and, if possible, after confirming that it aligns with project goals.
## Task Handling & Incremental Changes

When handling requests or development tasks, consistently follow these guidelines:

### 1. Clear Understanding
- Precisely define task scope and objectives before beginning.
- Confirm understanding of the requested features or changes.

### 2. Scoped Actions
- Restrict changes strictly to the scope defined by tasks.
- Do not modify unrelated modules or configurations.

### 3. Structured Incremental Steps
- Implement tasks in small, incremental steps.
- Clearly document each incremental change.

### 4. Comprehensive Solution Proposals
- Clearly specify exact file paths and line numbers for proposed changes.
- Provide rationale for architectural or dependency changes.
- Suggest practical refactoring opportunities.

### 5. Regular Verification
- Regularly test incremental changes to ensure quality.
- Perform static analysis, type-checking, or run tests prior to committing.
- Mark uncertain changes explicitly with TODO comments or request clarification.

### 6. Clean and Clear Commits
- Use standardized, clear commit messages following project conventions.
- Clearly document the "what" and "why" of every commit.

This ensures structured, clear, and high-quality task execution.
