# General Development Guidelines

- **Project Structure**: Organize code into a clear, logical structure. Group related files into modules or directories (for example, by feature or layer: `components/`, `services/`, `utils/`, etc.). Avoid large monolithic files; instead, break the codebase into smaller, focused files where each file handles a specific piece of functionality. A well-structured project makes navigation and maintenance easier for everyone.
- **Naming Conventions**: Use consistent naming conventions throughout the project. For instance, use **PascalCase** for class and interface names, **camelCase** for variables and functions, and **UPPER_SNAKE_CASE** for constants and environment variables. File and directory names should be descriptive and follow the project style (e.g., kebab-case for multi-word filenames, if that is the team preference). Consistent naming makes the code self-documenting to a large extent.
- **Documentation**: Maintain clear documentation at both the project and code level. Update the project README (or docs site) when adding new features or significant changes, describing usage and any important details. Within the code, ensure that complex algorithms or important design decisions are explained with comments or docstrings. This helps future maintainers (or the AI itself) to understand the intent behind the code.
- **Testing Requirements**: All new code should include appropriate tests. Write unit tests for individual functions/components and integration tests for how parts work together, as applicable. Aim for high test coverage to catch regressions early; at minimum, critical logic must be covered by tests. Run the full test suite (and ensure it passes) before considering a task complete. If a bug is fixed, add a test to prevent that bug from resurfacing. This ensures long-term code quality and reliability.
- **Performance Considerations**: Follow best practices to ensure the application runs efficiently. Avoid blocking operations on the main thread/event loop – for example, use asynchronous patterns for I/O and network requests in Node.js or the browser. Choose efficient algorithms and data structures for processing large data sets (be mindful of O(n) vs O(n²) patterns). That said, do not prematurely optimize at the expense of clarity; write clean code first, then optimize if profiling shows a need.
- **Collaboration and Workflow**: Adhere to good software development workflows. Use version control effectively: work on feature branches for isolated changes and merge via pull requests if working with a team. Ensure commit history remains clean and comprehensible (see commit rules above). Take advantage of code reviews – whether by a human or AI peer review – to catch issues and share knowledge. Also, keep the project’s issue tracker or task board updated with progress, so the development process is transparent.
## Issue Diagnosis & Troubleshooting

Diagnose and resolve issues methodically using a structured approach:

### 1. Understand Architecture First
- Clearly identify application architecture patterns and key abstractions.
- Map component hierarchy and data flows related to the issue.
- Evaluate if issues indicate deeper architectural misalignments.

### 2. Assess Issues Holistically
- Collect complete error messages, logs, and observable behaviors.
- Identify multiple potential root causes at different system layers.
- Differentiate between design flaws and implementation bugs.

### 3. Discover Reusable Solutions
- Search existing codebase for similar issues or solved patterns.
- Prioritize using proven solutions or common practices consistently.

### 4. Evaluate the Impact
- Check for proper separation of concerns and adherence to conventions.
- Carefully consider performance implications and maintainability.
- Ensure testing and future maintenance efforts are realistic.

### 5. Propose Strategic Solutions
- Recommend solutions consistent with current architecture.
- Explicitly provide file paths and line numbers needing changes.
- Identify refactoring opportunities to improve code structure.
- Justify solutions clearly, referencing engineering principles.
- Balance short-term fixes with long-term improvements.

### 6. Validate Like a Professional
- Clearly outline comprehensive test scenarios, especially edge cases.
- Recommend suitable validation methods and monitoring practices.
- Anticipate regressions and explicitly suggest prevention strategies.

This structured approach ensures effective troubleshooting, robust architecture, and maintainable code.
