// File: specs/user_interface.pseudo
// Version: 1.0
// Description: Defines the user interface components and interactions for project management and review.

MODULE UserInterface

  // --- Dependencies ---
  IMPORT IterativeWorkflowEngine
  IMPORT LocalDatabase
  IMPORT AgentCollaborationFramework // For potential direct user input injection

  // --- UI State (Conceptual) ---
  DEFINE current_view AS STRING // e.g., 'ProjectList', 'ProjectDashboard', 'HistoryViewer'
  DEFINE selected_project_id AS STRING OR NULL
  DEFINE displayed_data AS ANY // Data currently shown to the user

  // --- UI Components / Views ---

  // View: Project List
  FUNCTION display_project_list():
    // TDD_ANCHOR: test_ui_displays_all_projects
    SET current_view = 'ProjectList'
    DEFINE projects = LocalDatabase.get_all_project_summaries() // Needs DB function
    SET displayed_data = projects
    // RENDER list of projects with basic status (e.g., Running, Completed, Halted)
    // PROVIDE options: 'Start New Project', 'Open Project'
  END FUNCTION

  // Action: Start New Project
  FUNCTION handle_start_new_project_button_click():
    // TDD_ANCHOR: test_ui_start_project_no_input
    // TDD_ANCHOR: test_ui_start_project_with_input
    // PROMPT user for optional initial idea/topic (text input)
    DEFINE user_input = GET user input OR NULL
    DEFINE new_project_id = generate_unique_project_id()
    IterativeWorkflowEngine.start_new_project(new_project_id, user_input)
    CALL display_project_dashboard(new_project_id) // Switch to the new project's view
  END FUNCTION

  // Action: Open Project
  FUNCTION handle_open_project_button_click(project_id):
    // TDD_ANCHOR: test_ui_open_existing_project
    CALL display_project_dashboard(project_id)
  END FUNCTION

  // View: Project Dashboard
  FUNCTION display_project_dashboard(project_id):
    // TDD_ANCHOR: test_ui_dashboard_displays_status
    // TDD_ANCHOR: test_ui_dashboard_displays_active_idea
    // TDD_ANCHOR: test_ui_dashboard_displays_recent_history
    SET current_view = 'ProjectDashboard'
    SET selected_project_id = project_id
    DEFINE workflow_state = LocalDatabase.load_workflow_state(project_id)
    DEFINE project_context = LocalDatabase.load_project_context(project_id)

    SET displayed_data = {
      status: workflow_state.current_phase,
      active_idea: find_idea_by_id(project_context.ideas, workflow_state.active_idea_id), // May be null
      recent_history: workflow_state.history[-5:], // Show last 5 history entries
      current_drafts: filter_drafts_by_idea(project_context.drafts, workflow_state.active_idea_id),
      current_evaluations: filter_evaluations_by_idea(project_context.evaluations, workflow_state.active_idea_id)
      // Add more relevant data as needed
    }

    // RENDER dashboard:
    // - Current Phase (e.g., 'Evaluating Idea X')
    // - Details of the active idea (if any)
    // - Log/stream of recent agent actions (from workflow_state.history)
    // - Display current drafts/evaluations for the active idea
    // - PROVIDE buttons: 'View Full History', 'Provide Input (Optional)'
  END FUNCTION

  // Callback: Update Project Status (Called by Workflow Engine)
  FUNCTION update_project_status(project_id, workflow_state, latest_history_entry=NULL):
    // TDD_ANCHOR: test_ui_updates_on_workflow_notification
    // TDD_ANCHOR: test_ui_updates_correct_project
    IF current_view == 'ProjectDashboard' AND selected_project_id == project_id:
      // Refresh the dashboard view if the user is currently looking at this project
      CALL display_project_dashboard(project_id)
    ELSE IF current_view == 'ProjectList':
      // Update the status summary in the project list
      CALL display_project_list() // Inefficient, better to update just the specific item
    ENDIF
    // Optionally show a notification to the user about the update
  END FUNCTION

  // Callback: Notify Completion (Called by Workflow Engine)
  FUNCTION notify_completion(project_id, final_proposal_md):
      // TDD_ANCHOR: test_ui_notifies_completion
      // TDD_ANCHOR: test_ui_provides_download
      IF selected_project_id == project_id:
          // Update dashboard to show 'Completed' status
          CALL display_project_dashboard(project_id) // Refresh view
      ENDIF
      // SHOW notification: "Project [project_id] Completed!"
      // PROVIDE option to download/view the final Markdown proposal
      CALL offer_download("proposal_" + project_id + ".md", final_proposal_md)
  END FUNCTION

  // Action: Provide Input (Optional)
  FUNCTION handle_provide_input_button_click():
    // TDD_ANCHOR: test_ui_provide_input_to_agent
    // This is complex: How does user input influence the *current* process?
    // Option 1: Add input as context for the *next* relevant agent task.
    // Option 2: Allow user to suggest a specific *next* task (e.g., "Re-evaluate idea X with this focus: ...") - More complex workflow integration.
    // Let's assume Option 1 for simplicity: Add to general context or history.
    IF selected_project_id IS NULL: RETURN

    // PROMPT user for input type (e.g., 'Feedback on current idea', 'Suggest new direction') and text content
    DEFINE input_type = GET user input type
    DEFINE input_text = GET user input text

    DEFINE user_feedback_entry = {
      timestamp: current_time(),
      type: input_type,
      content: input_text,
      source: "user"
    }

    // Add this to the project's history log via the database
    LocalDatabase.add_history_entry(selected_project_id, user_feedback_entry)
    LOG "User input added to history for project: " + selected_project_id

    // The agents' prompts should be designed to check recent history for user input.
    // No direct task injection here for simplicity, relies on agents checking context.
    // Refresh dashboard to show the input in history
    CALL display_project_dashboard(selected_project_id)
  END FUNCTION

  // View: History Viewer
  FUNCTION display_history_viewer(project_id):
    // TDD_ANCHOR: test_ui_history_displays_all_entries
    // TDD_ANCHOR: test_ui_history_displays_discarded_ideas
    SET current_view = 'HistoryViewer'
    SET selected_project_id = project_id
    DEFINE project_context = LocalDatabase.load_project_context(project_id) // Contains full history, ideas, drafts, evals

    SET displayed_data = project_context // Display everything

    // RENDER a detailed view:
    // - Chronological list of all agent actions and state changes (from project_context.history)
    // - List of all generated ideas (including status: 'new', 'evaluated', 'refined', 'discarded', 'selected')
    // - All evaluations associated with each idea
    // - All draft versions associated with ideas
    // - Allow filtering/searching within the history
  END FUNCTION

  // Action: View Full History
  FUNCTION handle_view_history_button_click():
    // TDD_ANCHOR: test_ui_navigate_to_history_view
    IF selected_project_id IS NOT NULL:
      CALL display_history_viewer(selected_project_id)
    ENDIF
  END FUNCTION

  // --- Helper Functions (Conceptual) ---
  FUNCTION generate_unique_project_id(): RETURN STRING // TDD_ANCHOR: test_generate_unique_id
  FUNCTION find_idea_by_id(ideas, id): RETURN idea OR NULL // TDD_ANCHOR: test_ui_find_idea
  FUNCTION filter_drafts_by_idea(drafts, idea_id): RETURN LIST<DraftSection> // TDD_ANCHOR: test_ui_filter_drafts
  FUNCTION filter_evaluations_by_idea(evals, idea_id): RETURN LIST<Evaluation> // TDD_ANCHOR: test_ui_filter_evaluations
  FUNCTION offer_download(filename, content): // TDD_ANCHOR: test_ui_offer_download
    // Platform-specific logic to trigger file download
  END FUNCTION
  FUNCTION GET(prompt_message): RETURN user_input // Abstract user input
  FUNCTION RENDER(view_data): // Abstract UI rendering
  FUNCTION SHOW(notification_message): // Abstract notification display

END MODULE